spring:
  profiles:
    active: dev
  application:
    name: eureka-server

#注意代码中符号  ‘---’ 并不是注释，而是分隔符，标识多个开发环境配置或者说多个服务实例配置。
#比如开发环境，测试环境，生产环境等；或者就是集群的多个服务实例配置
#此处配置为服务实例的集群配置方式
---
spring:
  profiles: master
server:
  port: 8881

eureka:
  instance:
    #非集群参数：
    #hosthome: localhost
    #集群配置：
    hostname: master
  client:
    #表示是否注册Eureka服务器,因为自身作为服务注册中心，所以为false
    registerWithEureka: false
    #是否从eureka上获取注册信息
    fetchRegistry: false
    serviceUrl:
      #非集群配置：
      #defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
      #集群配置：
      #此处的url需要在hosts中进行配置，否则无法系统无法识别develop所指代的url
      #注意：本地搭建eureka server集群，所以需要修改本地hosts文件。windows系统电脑在C:\Windows\System32\drivers\etc，
      #   mac操作系统通过终端vim/etc/hosts进行编辑修改，修改内容如下
      #   127.0.0.1      master
      #   127.0.0.1      develop
      #   修改完成后保存hosts文件，不过window系统修改后不会马上起效果,我们需要重启电脑，或者清除本地dns缓存
      #   清除缓存命令 ,打开cmd,输入 ipconfig /flushdns
      defaultZone: http://develop:8882/eureka/
  server:
    #禁用自我保护模式：
    #默认情况下，如果Eureka Server在一定时间内没有接收到某个微服务实例的心跳，Eureka Server将会注销该实例（默认90秒）。
    #   但是当网络分区故障发生时，微服务与Eureka Server之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务。
    #   Eureka通过“自我保护模式”来解决这个问题——当Eureka Server节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式;
    #   一旦进入该模式，Eureka Server就会保护服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务）。
    #   当网络故障恢复后，该Eureka Server节点会自动退出自我保护模式。
    #自我保护模式是一种应对网络异常的安全保护措施。
    #   它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留），也不盲目注销任何健康的微服务。
    #   使用自我保护模式，可以让Eureka集群更加的健壮、稳定。
    enable-self-preservation: false


---
spring:
  profiles: dev
server:
  port: 8882

eureka:
  instance:
    #hosthome: localhost
    hostname: develop
  client:
    #表示是否注册Eureka服务器,因为自身作为服务注册中心，所以为false
    registerWithEureka: false
    #是否从eureka上获取注册信息
    fetchRegistry: false
    serviceUrl:
      #defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
      defaultZone: http://master:8881/eureka/
  server:
    #禁用自我保护模式：
    enable-self-preservation: false